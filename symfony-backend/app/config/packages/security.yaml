# config/packages/security.yaml
security:
    password_hashers:
        App\Entity\User: 'auto'

    providers:
        users_in_database:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/auth/login$
            stateless: true

        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            provider: users_in_database

        main:
            lazy: true
            provider: users_in_database

    access_control:
         - { path: ^/api/auth/login$,        roles: PUBLIC_ACCESS }
         - { path: ^/api/auth/register$,     roles: PUBLIC_ACCESS }
         - { path: ^/api/auth/verify-account, roles: PUBLIC_ACCESS }
         - { path: ^/api,                    roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
            
